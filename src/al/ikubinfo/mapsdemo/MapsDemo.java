package al.ikubinfo.mapsdemo;

import com.codename1.components.InteractionDialog;
import com.codename1.components.ToastBar;
import com.codename1.googlemaps.MapContainer;
import com.codename1.location.LocationManager;
import com.codename1.maps.Coord;
import com.codename1.ui.Button;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Label;
import com.codename1.ui.SideMenuBar;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Rectangle;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import java.util.ArrayList;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MapsDemo {

    private static final String HTML_API_KEY = "AIzaSyBWeRU02YUYPdwRuMFyTKIXUbHjq6e35Gw";
    private Form current;
    private ArrayList<Results> resultsList;

    public void init(Object context) {
        try {
            Resources theme = Resources.openLayered("/theme");
            UIManager.getInstance().setThemeProps(theme.getTheme(theme.getThemeResourceNames()[0]));
            Display.getInstance().setCommandBehavior(Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION);
            UIManager.getInstance().getLookAndFeel().setMenuBarClass(SideMenuBar.class);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void start() {
        try {
            if (current != null) {
                current.show();
                return;
            }
            Form hi = new Form("Native Maps Test");
            hi.setLayout(new BorderLayout());
            final MapContainer cnt = new MapContainer();
            TextField address = new TextField();
            Container searchBar = new Container();
            Button search = new Button();
            search.addActionListener(e -> {

            GoogleResponse googleResponseList = DataProxy.getResponse(address.getText());
      
                if (googleResponseList != null) {
                    resultsList = googleResponseList.getResults();
                    if (resultsList != null) {
                        try {
                            for (Results result : resultsList) {
                                double lat = result.getGeometry().getLocation().getLat();
                                double lng = result.getGeometry().getLocation().getLng();
//                                System.out.println(lat);
//                                System.out.println(lng);
                                cnt.setCameraPosition(new Coord(lat, lng));
                                cnt.addMarker(EncodedImage.create("/maps-pin.png"), new Coord(lat, lng), "Hi marker", "Optional long description", new ActionListener() {
                                    public void actionPerformed(ActionEvent evt) {
                                        Dialog.show("Marker Clicked!", "You clicked the marker", "OK", null);
                                    }
                                });
                            }
                        } catch (IOException err) {
                            // since the image is iin the jar this is unlikely
                            err.printStackTrace();
                        }
                    } else {
                        Dialog.show("Info", "Nuk u gjet adresa ne harte", "Ok", "Cancel");
                    }
                }

            });
            cnt.addTapListener(e->{
           
            TextField enterName = new TextField();
            Container wrapper = BoxLayout.encloseY(new Label("Name:"), enterName);
            InteractionDialog dlg = new InteractionDialog("Add Marker");
            dlg.getContentPane().add(wrapper);
            enterName.setDoneListener(e2->{
            String txt = enterName.getText();
                try {
                    cnt.addMarker(EncodedImage.create("/maps-pin.png"), cnt.getCoordAtPosition(e.getX(), e.getY()), enterName.getText(), "", e3->{
                        ToastBar.showMessage("You clicked "+txt, FontImage.MATERIAL_PLACE);
                    });
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                dlg.dispose();
            });
            dlg.showPopupDialog(new Rectangle(e.getX(), e.getY(), 10, 10));
            enterName.startEditingAsync();
        });
            searchBar.setLayout(new BoxLayout(BoxLayout.X_AXIS));
            searchBar.add(address);
            search.setIcon(EncodedImage.create("/search.png"));
            searchBar.add(search);
            com.codename1.location.Location location = LocationManager.getLocationManager().getCurrentLocationSync(3000);
            Button b = new Button("Get current location");
            b.addActionListener(e->{
                double lat = location.getLatitude();
                double lng = location.getLongitude();
                System.out.println(lat);
                 System.out.println(lng);
                 cnt.setCameraPosition(new Coord(lat, lng));
            });
            hi.addComponent(BorderLayout.NORTH, searchBar);
            hi.addComponent(BorderLayout.CENTER, cnt);
            hi.addComponent(BorderLayout.SOUTH, b);
            hi.show();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }

    public void destroy() {
    }
}
